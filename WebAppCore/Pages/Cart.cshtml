@page
@model CartModel
@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "_Layout";
}

<h1>Shopping Cart</h1>

@if (!Model.IsLoggedIn)
{
    <p>You must be logged in to view your cart. Redirecting...</p>
}
else if (Model.CartItems.Any())
{
    <table class="cart-table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CartItem item in Model.CartItems)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>$@item.Price</td>
                    <td>$@(item.Quantity * item.Price)</td>
                    <td>
                        <button onclick="increment('@item.ProductId')">+</button>
                        <button onclick="decrement('@item.ProductId')">-</button>
                        <button onclick="removeCompletely('@item.ProductId')">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3"><strong>Total</strong></td>
                <td colspan="2"><strong>$@Model.CartTotal</strong></td>
            </tr>
        </tfoot>
    </table>


    <div class="cart-checkout">
        <button onclick="checkout()">Proceed to Checkout</button>
    </div>
}
else
{
    <p>Your cart is empty.</p>
}


<style>
    .cart-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .cart-table th, .cart-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        .cart-table th {
            background-color: #f2f2f2;
        }

    .cart-checkout {
        margin-top: 20px;
        text-align: right;
    }
</style>


<script>
    async function increment(productId) {
        const userId = '@HttpContext.Session.GetString("User")';
        const token = '@HttpContext.Session.GetString("JWTToken")';

        try {
            const response = await fetch('https://localhost:7246/api/cart/increment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ productId: productId, userId: userId })
            });

            if (response.ok) {
                alert("Quantity incremented successfully!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                console.log("Response Status:", response.status);
                alert("Failed to increment quantity.");
            }
        } catch (error) {
            console.error("Error incrementing quantity:", error);
            alert("An error occurred while incrementing the quantity.");
        }
    }

    async function decrement(productId) {
        const userId = '@HttpContext.Session.GetString("User")';
        const token = '@HttpContext.Session.GetString("JWTToken")';

        try {
            const response = await fetch('https://localhost:7246/api/cart/remove', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ productId: productId, quantity: 1, userId: userId })
            });

            if (response.ok) {
                alert("Quantity decremented successfully!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                console.log("Response Status:", response.status);
                alert("Failed to decrement quantity.");
            }
        } catch (error) {
            console.error("Error decrementing quantity:", error);
            alert("An error occurred while decrementing the quantity.");
        }
    }

    async function removeCompletely(productId) {
        const userId = '@HttpContext.Session.GetString("User")';
        const token = '@HttpContext.Session.GetString("JWTToken")';

        try {
            const response = await fetch('https://localhost:7246/api/cart/remove-completely', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ productId: productId, userId: userId })
            });

            if (response.ok) {
                alert("Item removed completely from cart!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                console.log("Response Status:", response.status);
                alert("Failed to remove item completely.");
            }
        } catch (error) {
            console.error("Error removing item completely:", error);
            alert("An error occurred while removing the item.");
        }
    }


</script>
